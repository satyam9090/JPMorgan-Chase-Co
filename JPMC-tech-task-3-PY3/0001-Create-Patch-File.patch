From 16f119c5b1cd45ba440a4767f246f27b4bd49d53 Mon Sep 17 00:00:00 2001
From: Satyam Singh Chauhan <sat00yam@gmail.com>
Date: Fri, 24 Apr 2020 22:28:44 +0530
Subject: [PATCH] Create Patch File

---
 src/DataManipulator.ts | 34 ++++++++++++++++++++++++++--------
 src/Graph.tsx          | 35 ++++++++++++++++++++++++-----------
 2 files changed, 50 insertions(+), 19 deletions(-)

diff --git a/src/DataManipulator.ts b/src/DataManipulator.ts
index f6b15ff..629c05b 100644
--- a/src/DataManipulator.ts
+++ b/src/DataManipulator.ts
@@ -1,20 +1,38 @@
 import { ServerRespond } from './DataStreamer';
 
 export interface Row {
-  stock: string,
-  top_ask_price: number,
+  price_abc : number,
+  price_def : number,
+  ratio : number,
   timestamp: Date,
+  upper_bound : number,
+  lower_bound : number,
+  trigger_alert : number | undefined,
 }
 
+// The upper_bound and lower_bound are pretty much constant for any data
+// point. This is how we will be able to maintain them as steady upper and lower
+// lines in the graph.
+
+// The trigger_alert field is pretty much just a field that has a value (e.g. the ratio)
+// if the threshold is passed by the ratio. Otherwise if the ratio remains within the
+// threshold, then no value/undefined will suffice.
 
 export class DataManipulator {
-  static generateRow(serverResponds: ServerRespond[]): Row[] {
-    return serverResponds.map((el: any) => {
+  static generateRow(serverRespond: ServerRespond[]): Row {
+    const priceABC = (serverRespond[0].top_ask.price + serverRespond[0].top_bid.price) / 2;
+    const priceDEF = (serverRespond[1].top_ask.price + serverRespond[1].top_bid.price) / 2;
+    const ratio = priceABC/priceDEF
+    const upperBound = 1 + 0.05;
+    const lowerBound = 1 - 0.05;
       return {
-        stock: el.stock,
-        top_ask_price: el.top_ask && el.top_ask.price || 0,
-        timestamp: el.timestamp,
+        price_abc: priceABC,
+        price_def: priceDEF,
+        ratio,
+        timestamp: serverRespond[0].timestamp > serverRespond[1].timestamp ? serverRespond[0].timestamp : serverRespond[1].timestamp,
+        upper_bound: upperBound,
+        lower_bound: lowerBound,
+        trigger_alert: (ratio > upperBound || ratio < lowerBound) ? ratio : undefined,
       };
-    })
   }
 }
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 58fb997..4509c84 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -23,10 +23,13 @@ class Graph extends Component<IProps, {}> {
     const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
+      price_abc : 'float',
+      price_def : 'float',
+      ratio : 'float',
       timestamp: 'date',
+      upper_bound : 'float',
+      lower_bound : 'float',
+      trigger_alert : 'float',
     };
 
     if (window.perspective && window.perspective.worker()) {
@@ -35,24 +38,34 @@ class Graph extends Component<IProps, {}> {
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
       elem.load(this.table);
+
+      //‘view’ is the the kind of graph we wanted to visualize the data as.
       elem.setAttribute('view', 'y_line');
-      elem.setAttribute('column-pivots', '["stock"]');
+
+      //'row-pivots' allows us to map each datapoint based on the timestamp 
       elem.setAttribute('row-pivots', '["timestamp"]');
-      elem.setAttribute('columns', '["top_ask_price"]');
+
+      //‘columns’ is what will allow us to only focus on a particular part of a datapoint’s data along the y-axis.
+      elem.setAttribute('columns', '["ratio", "lower_bound", "upper_bound", "trigger_alert"]');
+
+      //‘aggregates’ is what will allow us to handle the cases of duplicated data
       elem.setAttribute('aggregates', JSON.stringify({
-        stock: 'distinctcount',
-        top_ask_price: 'avg',
-        top_bid_price: 'avg',
-        timestamp: 'distinct count',
+        price_abc : 'avg',
+	    price_def : 'avg',
+	    ratio : 'avg',
+	    timestamp: 'distinct_count',
+	    upper_bound : 'avg',
+	    lower_bound : 'avg',
+	    trigger_alert : 'avg',
       }));
     }
   }
 
   componentDidUpdate() {
     if (this.table) {
-      this.table.update(
+      this.table.update([
         DataManipulator.generateRow(this.props.data),
-      );
+      ]);
     }
   }
 }
-- 
2.24.1.windows.2

